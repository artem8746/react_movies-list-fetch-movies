{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","data","onMovieAdd","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","foundMovie","setFoundMovie","_useState7","_useState8","isError","setIsError","normalizedMovie","Title","Plot","Poster","concat","imdbID","_Fragment","onSubmit","event","preventDefault","fetch","then","res","json","catch","Response","Error","getMovie","response","finally","htmlFor","value","onChange","target","type","id","placeholder","cn","disabled","onClick","App","setMovies","newMovie","some","currentMovies","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"8TAQaA,EAA6B,SAAHC,GAAA,IAAMC,EAAKD,EAALC,MAAK,OAChDC,eAAA,OAAKC,UAAU,OAAO,UAAQ,YAAWC,SAAA,CACvCC,cAAA,OAAKF,UAAU,aAAYC,SACzBC,cAAA,UAAQF,UAAU,gBAAeC,SAC/BC,cAAA,OACE,UAAQ,cACRC,IAAKL,EAAMM,OACXC,IAAI,kBAIVN,eAAA,OAAKC,UAAU,eAAcC,SAAA,CAC3BF,eAAA,OAAKC,UAAU,QAAOC,SAAA,CACpBC,cAAA,OAAKF,UAAU,aAAYC,SACzBC,cAAA,UAAQF,UAAU,iBAAgBC,SAChCC,cAAA,OACEC,IAAI,wBACJE,IAAI,aAIVH,cAAA,OAAKF,UAAU,gBAAeC,SAC5BC,cAAA,KAAGF,UAAU,aAAa,UAAQ,aAAYC,SAAEH,EAAMQ,aAI1DP,eAAA,OAAKC,UAAU,UAAU,UAAQ,mBAAkBC,SAAA,CAChDH,EAAMS,YACPL,cAAA,SACAA,cAAA,KAAGM,KAAMV,EAAMW,QAAS,UAAQ,WAAUR,SAAC,iBAK3C,EChCKS,EAA8B,SAAHb,GAAA,IAAMc,EAAMd,EAANc,OAAM,OAClDT,cAAA,OAAKF,UAAU,SAAQC,SACpBU,EAAOC,KAAI,SAAAd,GAAK,OACfI,cAACN,EAAS,CAERE,MAAOA,GADFA,EAAMe,OAEX,KAEA,E,sBCWD,IAAMC,EAA6B,SAAHjB,GAAwB,IApBnCkB,EAoBiBC,EAAUnB,EAAVmB,WAC3CC,EAA0BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,EAAkCL,oBAAS,GAAMM,EAAAJ,YAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,EAAoCT,mBAA2B,MAAKU,EAAAR,YAAAO,EAAA,GAA7DE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,EAA8Bb,oBAAkB,GAAMc,EAAAZ,YAAAW,EAAA,GAA/CE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GACpBG,GAzBoBpB,EAyBiBc,GAvBlC,CACLvB,MAAOS,EAAKqB,MACZ7B,YAAaQ,EAAKsB,KAClBjC,OAAwB,QAAhBW,EAAKuB,OACT,4DACAvB,EAAKuB,OACT7B,QAAQ,8BAAD8B,OAAgCxB,EAAKyB,QAC5C3B,OAAQE,EAAKyB,QAIV,KAkDP,OACEzC,eAAA0C,WAAA,CAAAxC,SAAA,CACEF,eAAA,QACEC,UAAU,aACV0C,SAhCkC,SACtCC,GAEAA,EAAMC,iBAENlB,GAAa,GC5CV,SAAkBL,GACvB,OAAOwB,MAAM,GAADN,OAHE,2CAGS,OAAAA,OAAMlB,IAC1ByB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAM,IACtBC,OAAM,iBAAO,CACZC,SAAU,QACVC,MAAO,mBACR,GACL,CDuCIC,CAAS/B,GACNyB,MAAK,SAAAO,GACCA,EAA2BF,MAC9BjB,GAAW,GAEXJ,EAAcuB,EAElB,IACCC,SAAQ,WACP5B,GAAa,EACf,GACJ,EAcgDzB,SAAA,CAE1CF,eAAA,OAAKC,UAAU,QAAOC,SAAA,CACpBC,cAAA,SAAOF,UAAU,QAAQuD,QAAQ,cAAatD,SAAC,gBAI/CC,cAAA,OAAKF,UAAU,UAASC,SACtBC,cAAA,SACEsD,MAAOnC,EACPoC,SAlDU,SAACd,GACjBV,GACFC,GAAW,GAGbZ,EAASqB,EAAMe,OAAOF,MACxB,EA6CY,UAAQ,aACRG,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZ7D,UAAU,YAIbiC,GACC/B,cAAA,KAAGF,UAAU,iBAAiB,UAAQ,eAAcC,SAAC,4CAMzDF,eAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAC/BC,cAAA,OAAKF,UAAU,UAASC,SACtBC,cAAA,UACE,UAAQ,eACRyD,KAAK,SACL3D,UAAW8D,IAAG,kBAAmB,CAC/B,aAAcrC,IAEhBsC,UAAW1C,EAAMpB,SAClB,mBAKF4B,GACC3B,cAAA,OAAKF,UAAU,UAASC,SACtBC,cAAA,UACE8D,QAvDe,WAC3BhD,EAAWmB,GAEXb,EAAS,IACTY,GAAW,GACXJ,EAAc,KAChB,EAkDc,UAAQ,YACR6B,KAAK,SACL3D,UAAU,oBAAmBC,SAC9B,4BAQRkC,GACCpC,eAAA,OAAKC,UAAU,YAAY,UAAQ,mBAAkBC,SAAA,CACnDC,cAAA,MAAIF,UAAU,QAAOC,SAAC,YACtBC,cAACN,EAAS,CAACE,MAAOqC,SAK5B,EErIa8B,EAAM,WACjB,IAAAhD,EAA4BC,mBAAkB,IAAGC,EAAAC,YAAAH,EAAA,GAA1CN,EAAMQ,EAAA,GAAE+C,EAAS/C,EAAA,GAUxB,OACEpB,eAAA,OAAKC,UAAU,OAAMC,SAAA,CACnBC,cAAA,OAAKF,UAAU,eAAcC,SAC3BC,cAACQ,EAAU,CAACC,OAAQA,MAGtBT,cAAA,OAAKF,UAAU,UAASC,SACtBC,cAACY,EAAS,CAACE,WAfW,SAACmD,GACvBxD,EAAOyD,MAAK,SAAAvE,GAAS,OAAAA,EAANgB,SAAwBsD,EAAStD,MAAM,KAI1DqD,GAAU,SAAAG,GAAa,SAAA9B,OAAA+B,YAAQD,GAAa,CAAEF,GAAW,GAC3D,QAaF,ECxBAI,IAASC,OAAOtE,cAAC+D,EAAG,IAAKQ,SAASC,eAAe,Q","file":"static/js/main.85d6e015.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { MovieData } from '../../types/MovieData';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\nimport { ResponseError } from '../../types/ReponseError';\n\nfunction normalizeMovieData(data: MovieData | null): Movie | null {\n  if (data) {\n    return {\n      title: data.Title,\n      description: data.Plot,\n      imgUrl: data.Poster === 'N/A'\n        ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n        : data.Poster,\n      imdbUrl: `https://www.imdb.com/title/${data.imdbID}`,\n      imdbId: data.imdbID,\n    };\n  }\n\n  return null;\n}\n\ntype Props = {\n  onMovieAdd: (movie: Movie) => void,\n};\n\nexport const FindMovie: React.FC<Props> = ({ onMovieAdd }) => {\n  const [query, setQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [foundMovie, setFoundMovie] = useState<MovieData | null>(null);\n  const [isError, setIsError] = useState<boolean>(false);\n  const normalizedMovie = normalizeMovieData(foundMovie);\n\n  const onQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (isError) {\n      setIsError(false);\n    }\n\n    setQuery(event.target.value);\n  };\n\n  const handleFindNewMovieButtonClicked = (\n    event: React.FormEvent<HTMLFormElement>,\n  ) => {\n    event.preventDefault();\n\n    setIsLoading(true);\n\n    getMovie(query)\n      .then(response => {\n        if ((response as ResponseError).Error) {\n          setIsError(true);\n        } else {\n          setFoundMovie(response as MovieData);\n        }\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const handleAddMovieToList = () => {\n    onMovieAdd(normalizedMovie as Movie);\n\n    setQuery('');\n    setIsError(false);\n    setFoundMovie(null);\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleFindNewMovieButtonClicked}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              value={query}\n              onChange={onQueryChange}\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input\"\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn('button is-light', {\n                'is-loading': isLoading,\n              })}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {foundMovie && (\n            <div className=\"control\">\n              <button\n                onClick={handleAddMovieToList}\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {normalizedMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={normalizedMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=df9188dd';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const handleNewMovieAdded = (newMovie: Movie) => {\n    if (movies.some(({ imdbId }) => imdbId === newMovie.imdbId)) {\n      return;\n    }\n\n    setMovies(currentMovies => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onMovieAdd={handleNewMovieAdded} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}